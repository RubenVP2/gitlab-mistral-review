from __future__ import annotations

import logging
from typing import Any

import requests

from app.ports.output.ai_port import AIPort
from config.prompt import PROMPT_IA


class MistralAdapter(AIPort):
    """Send review requests to Mistral AI."""

    def __init__(self, api_key: str, model: str = "devstral-medium-2507") -> None:
        self.api_key = api_key
        self.model = model
        self.url = "https://api.mistral.ai/v1/chat/completions"
        self.logger = logging.getLogger(self.__class__.__name__)

    def review_diff(self, diff: str) -> str:
        """
        Send a diff to Mistral AI for review.

        Args:
            diff (str): The diff string to be reviewed.

        Returns:
            str: The review comment generated by Mistral AI.
        """
        prompt = PROMPT_IA.replace("{GIT_DIFF_ICI}", diff)
        payload = {
            "model": self.model,
            "prompt_mode": "reasoning",
            "messages": [{"role": "user", "content": prompt}],
        }
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
        }
        try:
            resp = requests.post(self.url, json=payload, headers=headers)
            resp.raise_for_status()
            result: Any = resp.json()
            review = (
                result.get("choices", [{}])[0].get("message", {}).get("content", "")
            )
            self.logger.debug("Réponse Mistral reçue : %s", review)
            return review
        except requests.RequestException as exc:
            self.logger.exception("Erreur lors de l'appel à Mistral: %s", exc)
            return "Erreur de communication avec Mistral."
